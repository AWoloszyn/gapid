{{/*
 * Copyright (C) 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */}}

{{/* ---- Includes ---- */}}
{{Include "go_common.tmpl"}}
{{Include "c_common.tmpl"}}

{{$ | Macro "api_memory_box.go" | GoFmt | Write "api_memory_box.go"}}

{{define "api_memory_box.go"}}
  {{AssertType $ "API"}}


  {{template "Go.GeneratedHeader" (Global "OutputDir")}}
¶

import (
    "context"

    "github.com/google/gapid/gapis/service/memory_box"
    ϟapi "github.com/google/gapid/gapis/api"
    ϟmem "github.com/google/gapid/gapis/memory"
)

var _ =  (*ϟmem.Size)(nil) // Force mem to be used, to avoid warnings

  {{range $i, $c := $.Pseudonyms}}
    {{Template "BoxValue" $c}}
  {{end}}
¶
  {{range $i, $c := $.Pointers}}
    {{Template "BoxValue" $c}}
  {{end}}
¶
  {{range $i, $c := $.Classes}}
    {{Template "BoxValue" $c}}
  {{end}}
¶
  {{range $i, $c := $.StaticArrays}}
      {{Template "BoxValue" $c}}
  {{end}}
¶
  {{range $i, $c := $.Enums}}
      {{Template "BoxValue" $c}}
  {{end}}
¶
  {{range $i, $c := $.Slices}}
      {{Template "BoxValue" $c}}
  {{end}}
¶
{{end}}

{{define "BoxValue"}}
  {{$ty     := Macro "Go.Type"   $}}
  {{Template "BoxNamedValue" "Name" $ty "Type" $}}
{{end}}

{{define "BoxNamedValue"}}
  {{if IsPointer $.Type}} {{Template "BoxPointer" $}}
  {{else if IsSlice $.Type}} {{Template "BoxSlice" $}}
  {{else if IsEnum $.Type}} {{Template "BoxEnum" $}}
  {{else if IsClass $.Type}} {{Template "BoxClass" $}}
  {{else if IsStaticArray $.Type}} {{Template "BoxStaticArray" $}}
  {{else if IsPseudonym $.Type}} {{Template "BoxNamedValue" "Name" $.Name "Type" (Underlying $.Type)}}
  {{else}} {{Template "BoxGeneric" $}} {{end}}
{{end}}

{{define "BoxField"}}
{{end}}

{{define "BoxPointer"}}
  func (p {{$.Name}}) BoxValue(ϟctx context.Context, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState) *memory_box.Value {
    return memory_box.Box(uint64(p), ϟctx, ϟc, ϟg)
  }
¶
{{end}}

{{define "BoxStaticArray"}}
  func (p {{$.Name}}) BoxValue(ϟctx context.Context, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState) *memory_box.Value {
    arr := &memory_box.Array{}
    for i := 0; i < ({{$.Type.Size}}); i++ {
      arr.Entries = append(arr.Entries, memory_box.Box(p.data[i], ϟctx, ϟc, ϟg))
    }
    return &memory_box.Value {
      Val: &memory_box.Value_Array { arr },
    }
  }
{{end}}

{{define "BoxClass"}}
  func (p {{$.Name}}) BoxValue(ϟctx context.Context, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState) *memory_box.Value {
    return &memory_box.Value {
      Val: &memory_box.Value_Struct {
        &memory_box.Struct {
          Fields: []*memory_box.Value{
            {{range $f := $.Type.Fields}}
              {{$get := GoPublicName $f.Name}}
              memory_box.Box(p.{{$get}}(), ϟctx, ϟc, ϟg),
            {{end}}
          },
        },
      },
    }
  }
{{end}}

{{define "BoxSlice"}}
  func (p {{$.Name}}) BoxValue(ϟctx context.Context, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState) *memory_box.Value {
    {{if IsVoid (Underlying $.Type.To)}}
      return &memory_box.Value{
        Val: &memory_box.Value_Slice{
          &memory_box.Slice{
            Values: []*memory_box.Value{},
          },
        },
      }
    {{else}}
      vals := []*memory_box.Value{}
      invals := p.MustRead(ϟctx, ϟc, ϟg, nil)
      for _, v := range invals {
        vals = append(vals, memory_box.Box(v, ϟctx, ϟc, ϟg))
      }
      return &memory_box.Value{
        Val: &memory_box.Value_Slice{
          &memory_box.Slice{
            Values: vals,
          },
        },
      }
    {{end}}
  }
{{end}}

{{define "BoxEnum"}}
  func (p {{$.Name}}) BoxValue(ϟctx context.Context, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState) *memory_box.Value {
    return &memory_box.Value {
      Val: &memory_box.Value_Null { &memory_box.Null {} },
    }
  }
{{end}}

{{define "BoxGeneric"}}
  {{if IsVoid (Underlying $.Type)}}{{else}}
  func (p {{$.Name}}) BoxValue(ϟctx context.Context, ϟc ϟapi.Cmd, ϟg *ϟapi.GlobalState) *memory_box.Value {
    return memory_box.Box({{Template "Go.Type" $.Type}}(p), ϟctx, ϟc, ϟg)
  }
  {{end}}
{{end}}
