// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

//////////////////////////
// Query pool and query //
//////////////////////////

enum QueryStatus {
  QUERY_STATUS_INACTIVE      = 0
  QUERY_STATUS_ACTIVE        = 1
  QUERY_STATUS_COMPLETE      = 2
  QUERY_STATUS_UNINITIALIZED = 4
}

@internal class QueryPoolObject {
  @unused VkDevice                      Device
  @unused VkQueryPool                   VulkanHandle
  @unused VkQueryType                   QueryType
  @unused u32                           QueryCount
  @unused VkQueryPipelineStatisticFlags PipelineStatistics
  @unused map!(u32, QueryStatus)        Status
  @unused ref!VulkanDebugMarkerInfo     DebugInfo
  @untracked @unused ref!QueueObject    LastBoundQueue
}

@threadSafety("system")
@indirect("VkDevice")
cmd VkResult vkCreateQueryPool(
    VkDevice                     device,
    const VkQueryPoolCreateInfo* pCreateInfo,
    AllocationCallbacks          pAllocator,
    VkQueryPool*                 pQueryPool) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if pCreateInfo == null { vkErrorNullPointer("VkQueuePoolCreateInfo") }
  info := pCreateInfo[0]
  // handle pNext
  if info.pNext != null {
    numPNext := numberOfPNext(info.pNext)
    next := MutableVoidPtr(as!void*(info.pNext))
    for i in (0 .. numPNext) {
      sType := as!const VkStructureType*(next.Ptr)[0:1][0]
      _ = sType
      // TODO: handle extensions for VkQueryPoolCreateInfo
      next.Ptr = as!VulkanStructHeader*(next.Ptr)[0:1][0].PNext
    }
  }

  handle := ?
  pool := new!QueryPoolObject(
    Device:              device,
    VulkanHandle:        handle,
    QueryType:           info.queryType,
    QueryCount:          info.queryCount,
    PipelineStatistics:  info.pipelineStatistics)
  for i in (0 .. info.queryCount) {
    pool.Status[i] = QUERY_STATUS_UNINITIALIZED
  }

  QueryPools[handle] = pool
  if pQueryPool == null { vkErrorNullPointer("VkQueuePool") }
  pQueryPool[0] = handle

  return ?
}

@threadSafety("system")
@indirect("VkDevice")
cmd void vkDestroyQueryPool(
    VkDevice                     device,
    VkQueryPool                  queryPool,
    AllocationCallbacks          pAllocator) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  delete(QueryPools, queryPool)
}

@threadSafety("system")
@indirect("VkDevice")
@threadsafe
cmd VkResult vkGetQueryPoolResults(
    VkDevice           device,
    VkQueryPool        queryPool,
    u32                firstQuery,
    u32                queryCount,
    size               dataSize,
    void*              pData,
    VkDeviceSize       stride,
    VkQueryResultFlags flags) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if !(queryPool in QueryPools) { vkErrorInvalidQueryPool(queryPool) }

  pool := QueryPools[queryPool]
  dstIntSize := switch (as!u32(flags) & as!u32(VK_QUERY_RESULT_64_BIT)) != 0 {
    case true: as!VkDeviceSize(8)
    case false: as!VkDeviceSize(4)
  }
  resultCount := getResultCount(pool)
  dstCount := switch (as!u32(flags) & as!u32(VK_QUERY_RESULT_WITH_AVAILABILITY_BIT)) != 0 {
    case true: resultCount + 1
    case false: resultCount
  }
  dstSize := dstIntSize * as!VkDeviceSize(dstCount)
  for i in (0 .. queryCount) {
    dstOffset := as!VkDeviceSize(i) * stride
    write(pData[dstOffset:dstOffset + dstSize])

    query := i + firstQuery
    if !(query < pool.QueryCount) { vkErrorQueryOutOfRange(queryPool, query) }
    if pool.Status[query] == QUERY_STATUS_UNINITIALIZED {
      vkErrorQueryUninitialized(queryPool, query)
    }
  }

  return ?
}

/////////////////////////////
// Command buffer commands //
/////////////////////////////

@internal class vkCmdBeginQueryArgs {
  VkQueryPool         QueryPool
  u32                 Query
  VkQueryControlFlags Flags
}

sub void dovkCmdBeginQuery(ref!vkCmdBeginQueryArgs args) {
  if !(args.QueryPool in QueryPools) { vkErrorInvalidQueryPool(args.QueryPool) }
  pool := QueryPools[args.QueryPool]
  if pool != null {
    if !(args.Query < pool.QueryCount) { vkErrorQueryOutOfRange(args.QueryPool, args.Query) }
    if pool.Status[args.Query] != QUERY_STATUS_INACTIVE {
      vkErrorQueryNotInactive(args.QueryPool, args.Query)
    }
    pool.Status[args.Query] = QUERY_STATUS_ACTIVE
    pool.LastBoundQueue = LastBoundQueue
  }
}

@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
cmd void vkCmdBeginQuery(
    VkCommandBuffer     commandBuffer,
    VkQueryPool         queryPool,
    u32                 query,
    VkQueryControlFlags flags) {
  cmdBuf := CommandBuffers[commandBuffer]
  if cmdBuf == null {
    vkErrorInvalidCommandBuffer(commandBuffer)
  } else {
    if !(queryPool in QueryPools) { vkErrorInvalidQueryPool(queryPool) }
    mapPos := cmdBuf.BufferCommands.vkCmdBeginQueryCount

    oldArgs := cmdBuf.BufferCommands.vkCmdBeginQuery[mapPos]
    args := switch oldArgs == null {
      case true: new!vkCmdBeginQueryArgs()
      case false: oldArgs
    }
    
    args.QueryPool = queryPool
    args.Query = query
    args.Flags = flags

    cmdBuf.BufferCommands.vkCmdBeginQuery[mapPos] = args
    cmdBuf.BufferCommands.vkCmdBeginQueryCount = mapPos + 1

    AddCommand(cmdBuf, cmd_vkCmdBeginQuery, mapPos)
  }
}

@internal class
vkCmdEndQueryArgs {
  VkQueryPool QueryPool
  u32         Query
}

sub void dovkCmdEndQuery(ref!vkCmdEndQueryArgs args) {
  if !(args.QueryPool in QueryPools) { vkErrorInvalidQueryPool(args.QueryPool) }
  pool := QueryPools[args.QueryPool]
  if pool != null {
    if !(args.Query < pool.QueryCount) { vkErrorQueryOutOfRange(args.QueryPool, args.Query) }
    if pool.Status[args.Query] != QUERY_STATUS_ACTIVE {
      vkErrorQueryNotActive(args.QueryPool, args.Query)
    }
    pool.Status[args.Query] = QUERY_STATUS_COMPLETE
    pool.LastBoundQueue = LastBoundQueue
  }
}

@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
cmd void vkCmdEndQuery(
    VkCommandBuffer commandBuffer,
    VkQueryPool     queryPool,
    u32             query) {
  cmdBuf := CommandBuffers[commandBuffer]
  if cmdBuf == null {
    vkErrorInvalidCommandBuffer(commandBuffer)
  } else {
    if !(queryPool in QueryPools) { vkErrorInvalidQueryPool(queryPool) }
    mapPos :=cmdBuf.BufferCommands.vkCmdEndQueryCount

    oldArgs := cmdBuf.BufferCommands.vkCmdEndQuery[mapPos]
    args := switch oldArgs == null {
      case true: new!vkCmdEndQueryArgs()
      case false: oldArgs
    }
    args.QueryPool = queryPool
    args.Query = query

    cmdBuf.BufferCommands.vkCmdEndQuery[mapPos] = args
    cmdBuf.BufferCommands.vkCmdEndQueryCount = mapPos + 1

    AddCommand(cmdBuf, cmd_vkCmdEndQuery, mapPos)
  }
}

@internal class
vkCmdResetQueryPoolArgs {
  VkQueryPool QueryPool
  u32         FirstQuery
  u32         QueryCount
}

sub void dovkCmdResetQueryPool(ref!vkCmdResetQueryPoolArgs args) {
  if !(args.QueryPool in QueryPools) { vkErrorInvalidQueryPool(args.QueryPool) }
  pool := QueryPools[args.QueryPool]
  if pool != null {
    for i in (0 .. args.QueryCount) {
      query := args.FirstQuery + i
      if !(query < pool.QueryCount) { vkErrorQueryOutOfRange(args.QueryPool, query) }
      pool.Status[args.FirstQuery + i] = QUERY_STATUS_INACTIVE
    }
    pool.LastBoundQueue = LastBoundQueue
  }
}

@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
cmd void vkCmdResetQueryPool(
    VkCommandBuffer commandBuffer,
    VkQueryPool     queryPool,
    u32             firstQuery,
    u32             queryCount) {
  cmdBuf := CommandBuffers[commandBuffer]
  if cmdBuf == null {
    vkErrorInvalidCommandBuffer(commandBuffer)
  } else {
    if !(queryPool in QueryPools) { vkErrorInvalidQueryPool(queryPool) }
    mapPos := cmdBuf.BufferCommands.vkCmdResetQueryPoolCount

    oldArgs := cmdBuf.BufferCommands.vkCmdResetQueryPool[mapPos]
    args := switch oldArgs == null {
      case true: new!vkCmdResetQueryPoolArgs()
      case false: oldArgs
    }
    args.QueryPool = queryPool
    args.FirstQuery = firstQuery
    args.QueryCount = queryCount

    cmdBuf.BufferCommands.vkCmdResetQueryPool[mapPos] = args
    cmdBuf.BufferCommands.vkCmdResetQueryPoolCount = mapPos + 1

    AddCommand(cmdBuf, cmd_vkCmdResetQueryPool, mapPos)
  }
}

@internal class vkCmdWriteTimestampArgs {
  VkPipelineStageFlagBits PipelineStage,
  VkQueryPool             QueryPool    ,
  u32                     Query
}

sub void dovkCmdWriteTimestamp(ref!vkCmdWriteTimestampArgs args) {
  if !(args.QueryPool in QueryPools) { vkErrorInvalidQueryPool(args.QueryPool) }
  pool := QueryPools[args.QueryPool]
  if pool != null {
    if !(args.Query < pool.QueryCount) { vkErrorQueryOutOfRange(args.QueryPool, args.Query) }
    if pool.Status[args.Query] != QUERY_STATUS_INACTIVE {
      vkErrorQueryNotInactive(args.QueryPool, args.Query)
    }
    pool.Status[args.Query] = QUERY_STATUS_COMPLETE

    pool.LastBoundQueue = LastBoundQueue
  }
}

@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
cmd void vkCmdWriteTimestamp(
    VkCommandBuffer         commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkQueryPool             queryPool,
    u32                     query) {
  cmdBuf := CommandBuffers[commandBuffer]
  if cmdBuf == null {
    vkErrorInvalidCommandBuffer(commandBuffer)
  } else {
    if !(queryPool in QueryPools) { vkErrorInvalidQueryPool(queryPool) }
    mapPos := cmdBuf.BufferCommands.vkCmdWriteTimestampCount
    
    oldArgs := cmdBuf.BufferCommands.vkCmdWriteTimestamp[mapPos]
    args := switch oldArgs == null {
      case true: new!vkCmdWriteTimestampArgs()
      case false: oldArgs
    }
    args.PipelineStage = pipelineStage
    args.QueryPool = queryPool
    args.Query = query

    cmdBuf.BufferCommands.vkCmdWriteTimestamp[mapPos] = args
    cmdBuf.BufferCommands.vkCmdWriteTimestampCount = mapPos + 1

    AddCommand(cmdBuf, cmd_vkCmdWriteTimestamp, mapPos)
  }
}

@internal
class vkCmdCopyQueryPoolResultsArgs {
  VkQueryPool        QueryPool
  u32                FirstQuery
  u32                QueryCount
  VkBuffer           DstBuffer
  VkDeviceSize       DstOffset
  VkDeviceSize       Stride
  VkQueryResultFlags Flags
}

sub void dovkCmdCopyQueryPoolResults(ref!vkCmdCopyQueryPoolResultsArgs args) {
  if !(args.QueryPool in QueryPools) { vkErrorInvalidQueryPool(args.QueryPool) }
  pool := QueryPools[args.QueryPool]
  if pool != null {
    pool.LastBoundQueue = LastBoundQueue
  }
  dstIntSize := switch (as!u32(args.Flags) & as!u32(VK_QUERY_RESULT_64_BIT)) != 0 {
    case true: as!VkDeviceSize(8)
    case false: as!VkDeviceSize(4)
  }
  resultCount := getResultCount(pool)
  dstCount := switch (as!u32(args.Flags) & as!u32(VK_QUERY_RESULT_WITH_AVAILABILITY_BIT)) != 0 {
    case true: resultCount + 1
    case false: resultCount
  }
  dstSize := dstIntSize * as!VkDeviceSize(dstCount)
  buf := Buffers[args.DstBuffer]
  for i in (0 .. args.QueryCount) {
    if buf != null {
      dstOffset := args.DstOffset + as!VkDeviceSize(i) * args.Stride
      writeMemoryInBuffer(buf, dstOffset, dstSize)
    }

    query := i + args.FirstQuery
    if !(query < pool.QueryCount) { vkErrorQueryOutOfRange(args.QueryPool, query) }
    if pool.Status[query] == QUERY_STATUS_UNINITIALIZED {
      vkErrorQueryUninitialized(args.QueryPool, query)
    }
  }
}

@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
cmd void vkCmdCopyQueryPoolResults(
    VkCommandBuffer    commandBuffer,
    VkQueryPool        queryPool,
    u32                firstQuery,
    u32                queryCount,
    VkBuffer           dstBuffer,
    VkDeviceSize       dstOffset,
    VkDeviceSize       stride,
    VkQueryResultFlags flags) {
  cmdBuf := CommandBuffers[commandBuffer]
  if cmdBuf == null {
    vkErrorInvalidCommandBuffer(commandBuffer)
  } else {
    if !(queryPool in QueryPools) {
      vkErrorInvalidQueryPool(queryPool)
    } else {
      if !(dstBuffer in Buffers) {
        vkErrorInvalidBuffer(dstBuffer)
      } else {
        mapPos := cmdBuf.BufferCommands.vkCmdCopyQueryPoolResultsCount

        oldArgs := cmdBuf.BufferCommands.vkCmdCopyQueryPoolResults[mapPos]
        args := switch oldArgs == null {
          case true: new!vkCmdCopyQueryPoolResultsArgs()
          case false: oldArgs
        }
        
        args.QueryPool = queryPool
        args.FirstQuery = firstQuery
        args.QueryCount = queryCount
        args.DstBuffer = dstBuffer
        args.DstOffset = dstOffset
        args.Stride = stride
        args.Flags = flags

        cmdBuf.BufferCommands.vkCmdCopyQueryPoolResults[mapPos] = args
        cmdBuf.BufferCommands.vkCmdCopyQueryPoolResultsCount = mapPos + 1

        AddCommand(cmdBuf, cmd_vkCmdCopyQueryPoolResults, mapPos)
      }
    }
  }
}

sub u32 getResultCount(ref!QueryPoolObject pool) {
  return switch pool.QueryType {
    case VK_QUERY_TYPE_OCCLUSION:
      as!u32(1)
    case VK_QUERY_TYPE_PIPELINE_STATISTICS:
      onesCount(as!u32(pool.PipelineStatistics))
    case VK_QUERY_TYPE_TIMESTAMP:
      as!u32(1)
  }
}
